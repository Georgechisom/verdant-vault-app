/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VerdantVault {
  export type InvestmentStruct = {
    investor: AddressLike;
    amount: BigNumberish;
    creditsEarned: BigNumberish;
    creditsClaimed: boolean;
  };

  export type InvestmentStructOutput = [
    investor: string,
    amount: bigint,
    creditsEarned: bigint,
    creditsClaimed: boolean
  ] & {
    investor: string;
    amount: bigint;
    creditsEarned: bigint;
    creditsClaimed: boolean;
  };

  export type MilestoneStruct = {
    description: string;
    fundPercentage: BigNumberish;
    proofIpfsHash: string;
    completed: boolean;
    approved: boolean;
  };

  export type MilestoneStructOutput = [
    description: string,
    fundPercentage: bigint,
    proofIpfsHash: string,
    completed: boolean,
    approved: boolean
  ] & {
    description: string;
    fundPercentage: bigint;
    proofIpfsHash: string;
    completed: boolean;
    approved: boolean;
  };
}

export interface VerdantVaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "approveMilestone"
      | "campaignCounter"
      | "campaigns"
      | "carbonCreditToken"
      | "claimCarbonCredits"
      | "claimRefund"
      | "createCampaign"
      | "getClaimableCredits"
      | "getInvestmentCount"
      | "getInvestments"
      | "getMilestoneCount"
      | "getMilestones"
      | "hts"
      | "invest"
      | "submitMilestoneProof"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CarbonCreditsClaimed"
      | "CarbonCreditsMinted"
      | "FundsReleased"
      | "InvestmentMade"
      | "MilestoneApproved"
      | "MilestoneProofSubmitted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveMilestone",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaigns",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonCreditToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimCarbonCredits",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableCredits",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestmentCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getInvestments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestoneCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMilestones",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "hts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "invest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitMilestoneProof",
    values: [BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveMilestone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "campaigns", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "carbonCreditToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestmentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvestments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestoneCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMilestones",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitMilestoneProof",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    farmer: AddressLike,
    fundingGoal: BigNumberish,
    deadline: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    farmer: string,
    fundingGoal: bigint,
    deadline: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    farmer: string;
    fundingGoal: bigint;
    deadline: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarbonCreditsClaimedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    investor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CarbonCreditsMintedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    totalAmount: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, totalAmount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    totalAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsReleasedEvent {
  export type InputTuple = [campaignId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [campaignId: bigint, amount: bigint];
  export interface OutputObject {
    campaignId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestmentMadeEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    investor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: bigint,
    investor: string,
    amount: bigint
  ];
  export interface OutputObject {
    campaignId: bigint;
    investor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneApprovedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    milestoneIndex: BigNumberish
  ];
  export type OutputTuple = [campaignId: bigint, milestoneIndex: bigint];
  export interface OutputObject {
    campaignId: bigint;
    milestoneIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MilestoneProofSubmittedEvent {
  export type InputTuple = [
    campaignId: BigNumberish,
    milestoneIndex: BigNumberish,
    ipfsHash: string
  ];
  export type OutputTuple = [
    campaignId: bigint,
    milestoneIndex: bigint,
    ipfsHash: string
  ];
  export interface OutputObject {
    campaignId: bigint;
    milestoneIndex: bigint;
    ipfsHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VerdantVault extends BaseContract {
  connect(runner?: ContractRunner | null): VerdantVault;
  waitForDeployment(): Promise<this>;

  interface: VerdantVaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  approveMilestone: TypedContractMethod<
    [_campaignId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;

  campaignCounter: TypedContractMethod<[], [bigint], "view">;

  campaigns: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        farmer: string;
        ipfsMetadata: string;
        fundingGoal: bigint;
        raisedAmount: bigint;
        deadline: bigint;
        estimatedCO2Tons: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  carbonCreditToken: TypedContractMethod<[], [string], "view">;

  claimCarbonCredits: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimRefund: TypedContractMethod<
    [_campaignId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createCampaign: TypedContractMethod<
    [
      _ipfsMetadata: string,
      _fundingGoal: BigNumberish,
      _durationDays: BigNumberish,
      _estimatedCO2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getClaimableCredits: TypedContractMethod<
    [_campaignId: BigNumberish, _investor: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;

  getInvestmentCount: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getInvestments: TypedContractMethod<
    [_campaignId: BigNumberish],
    [VerdantVault.InvestmentStructOutput[]],
    "view"
  >;

  getMilestoneCount: TypedContractMethod<
    [_campaignId: BigNumberish],
    [bigint],
    "view"
  >;

  getMilestones: TypedContractMethod<
    [_campaignId: BigNumberish],
    [VerdantVault.MilestoneStructOutput[]],
    "view"
  >;

  hts: TypedContractMethod<[], [string], "view">;

  invest: TypedContractMethod<[_campaignId: BigNumberish], [void], "payable">;

  submitMilestoneProof: TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _milestoneIndex: BigNumberish,
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveMilestone"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _milestoneIndex: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "campaignCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "campaigns"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint] & {
        farmer: string;
        ipfsMetadata: string;
        fundingGoal: bigint;
        raisedAmount: bigint;
        deadline: bigint;
        estimatedCO2Tons: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "carbonCreditToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "claimCarbonCredits"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRefund"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      _ipfsMetadata: string,
      _fundingGoal: BigNumberish,
      _durationDays: BigNumberish,
      _estimatedCO2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimableCredits"
  ): TypedContractMethod<
    [_campaignId: BigNumberish, _investor: AddressLike],
    [[bigint, boolean] & { amount: bigint; claimed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvestmentCount"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getInvestments"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [VerdantVault.InvestmentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMilestoneCount"
  ): TypedContractMethod<[_campaignId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMilestones"
  ): TypedContractMethod<
    [_campaignId: BigNumberish],
    [VerdantVault.MilestoneStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "hts"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "invest"
  ): TypedContractMethod<[_campaignId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "submitMilestoneProof"
  ): TypedContractMethod<
    [
      _campaignId: BigNumberish,
      _milestoneIndex: BigNumberish,
      _ipfsHash: string
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CarbonCreditsClaimed"
  ): TypedContractEvent<
    CarbonCreditsClaimedEvent.InputTuple,
    CarbonCreditsClaimedEvent.OutputTuple,
    CarbonCreditsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "CarbonCreditsMinted"
  ): TypedContractEvent<
    CarbonCreditsMintedEvent.InputTuple,
    CarbonCreditsMintedEvent.OutputTuple,
    CarbonCreditsMintedEvent.OutputObject
  >;
  getEvent(
    key: "FundsReleased"
  ): TypedContractEvent<
    FundsReleasedEvent.InputTuple,
    FundsReleasedEvent.OutputTuple,
    FundsReleasedEvent.OutputObject
  >;
  getEvent(
    key: "InvestmentMade"
  ): TypedContractEvent<
    InvestmentMadeEvent.InputTuple,
    InvestmentMadeEvent.OutputTuple,
    InvestmentMadeEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneApproved"
  ): TypedContractEvent<
    MilestoneApprovedEvent.InputTuple,
    MilestoneApprovedEvent.OutputTuple,
    MilestoneApprovedEvent.OutputObject
  >;
  getEvent(
    key: "MilestoneProofSubmitted"
  ): TypedContractEvent<
    MilestoneProofSubmittedEvent.InputTuple,
    MilestoneProofSubmittedEvent.OutputTuple,
    MilestoneProofSubmittedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(uint256,address,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CarbonCreditsClaimed(uint256,address,uint256)": TypedContractEvent<
      CarbonCreditsClaimedEvent.InputTuple,
      CarbonCreditsClaimedEvent.OutputTuple,
      CarbonCreditsClaimedEvent.OutputObject
    >;
    CarbonCreditsClaimed: TypedContractEvent<
      CarbonCreditsClaimedEvent.InputTuple,
      CarbonCreditsClaimedEvent.OutputTuple,
      CarbonCreditsClaimedEvent.OutputObject
    >;

    "CarbonCreditsMinted(uint256,uint256)": TypedContractEvent<
      CarbonCreditsMintedEvent.InputTuple,
      CarbonCreditsMintedEvent.OutputTuple,
      CarbonCreditsMintedEvent.OutputObject
    >;
    CarbonCreditsMinted: TypedContractEvent<
      CarbonCreditsMintedEvent.InputTuple,
      CarbonCreditsMintedEvent.OutputTuple,
      CarbonCreditsMintedEvent.OutputObject
    >;

    "FundsReleased(uint256,uint256)": TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;
    FundsReleased: TypedContractEvent<
      FundsReleasedEvent.InputTuple,
      FundsReleasedEvent.OutputTuple,
      FundsReleasedEvent.OutputObject
    >;

    "InvestmentMade(uint256,address,uint256)": TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;
    InvestmentMade: TypedContractEvent<
      InvestmentMadeEvent.InputTuple,
      InvestmentMadeEvent.OutputTuple,
      InvestmentMadeEvent.OutputObject
    >;

    "MilestoneApproved(uint256,uint256)": TypedContractEvent<
      MilestoneApprovedEvent.InputTuple,
      MilestoneApprovedEvent.OutputTuple,
      MilestoneApprovedEvent.OutputObject
    >;
    MilestoneApproved: TypedContractEvent<
      MilestoneApprovedEvent.InputTuple,
      MilestoneApprovedEvent.OutputTuple,
      MilestoneApprovedEvent.OutputObject
    >;

    "MilestoneProofSubmitted(uint256,uint256,string)": TypedContractEvent<
      MilestoneProofSubmittedEvent.InputTuple,
      MilestoneProofSubmittedEvent.OutputTuple,
      MilestoneProofSubmittedEvent.OutputObject
    >;
    MilestoneProofSubmitted: TypedContractEvent<
      MilestoneProofSubmittedEvent.InputTuple,
      MilestoneProofSubmittedEvent.OutputTuple,
      MilestoneProofSubmittedEvent.OutputObject
    >;
  };
}
